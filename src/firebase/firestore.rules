rules_version = '2';
service cloud.firestore {
    match /databases/{database}/documents {
        function hasTimestamp(field) {
            return request.resource.data[field] == request.time;
        }

        function isAuthenticated(id) {
            return request.auth != null && request.auth.uid == id;
        }

        function affectedKeys() {
            return request.resource.data.diff(resource.data).affectedKeys();
        }

        function isTeacher() {
            return request.auth != null && request.auth.token.email_verified;
        }

        function getStudent(uid) {
            return get(/databases/$(database)/documents/students/$(uid));
        }

        function getSchool(id) {
            return get(/databases/$(database)/documents/schools/$(id));
        }

        function isStudentSchool(school, token) {
            let student = getStudent(request.auth.uid);
            return student != null && (student.data.school == school || student.data.token == token);
        }

        function isTeacherSchool(schoolId) {
            let school = getSchool(schoolId);
            return school != null && isAuthenticated(school.data.teacher);
        }

        match /contests/{contest} {
            allow read: if request.auth != null;
        }

        match /schools/{school} {
            allow read: if isStudentSchool(school, resource.data.token) || isTeacher();
            allow update: if isAuthenticated(resource.data.teacher) && affectedKeys().hasOnly(['token', 'startingTime', 'finalized']);
        }

        match /solutions/{solution} {
            allow read: if isTeacher();
        }

        function studentHash(student) {
            let data = student.personalInformation;
            let joined = [data.name, data.surname, data.classYear, data.classSection, student.token].join('$');
            return hashing.sha256(joined).toHexString();
        }

        match /students/{student} {
            function checkToken(school) {
                return school != null
                    && school.data.token != null
                    && school.data.token == request.resource.data.token
                    && school.data.startingTime == request.resource.data.startedAt;
            }

            function canStudentCreate() {
                return isAuthenticated(request.resource.data.uid)
                    && checkToken(getSchool(request.resource.data.school))
                    && request.resource.data.personalInformation != null
                    && studentHash(request.resource.data.personalInformation)[0: 3] == request.resource.data.variant;
            }

            function canStudentUpdate() {
                let keys = affectedKeys();
                return isAuthenticated(resource.data.uid)
                    && !keys.hasAny(['uid', 'personalInformation', 'school', 'token', 'startedAt', 'variant', 'createdAt'])
                    && hasTimestamp('updatedAt');
            }

            function canTeacherUpdate() {
                let keys = affectedKeys();
                return isTeacherSchool(resource.data.school)
                    && !keys.hasAny(['school', 'createdAt'])
                    && hasTimestamp('updatedAt');
            }

            allow read: if isAuthenticated(resource.data.uid) || isTeacherSchool(resource.data.school);
            allow create: if (canStudentCreate() || isTeacherSchool(request.resource.data.school)) /* TODO && hasTimestamp('createdAt') */;
            allow update: if canStudentUpdate() || canTeacherUpdate();
        }

        match /studentMapping/{hash} {
            function canCreate() {
                let student = getStudent(request.resource.data.studentId);
                return student != null
                    && isAuthenticated(student.data.uid)
                    && student.data.personalInformation != null
                    && studentHash(student.data.personalInformation) == hash;
            }

            allow get: if request.auth != null;
            allow create: if canCreate();
        }

        match /submissions/{submission} {
            allow get: if isAuthenticated(resource.data.uid);
            allow create: if isAuthenticated(request.resource.data.uid) && hasTimestamp('submittedAt');
        }

        match /variants/{variant} {
            function canStudentReadVariant(variant) {
                let student = getStudent(request.auth.uid);
                return student != null
                    && student.data.variant == variant
                    && student.data.startedAt <= request.time;
            }

            allow read: if canStudentReadVariant(variant) || isTeacher();
        }
    }
}
