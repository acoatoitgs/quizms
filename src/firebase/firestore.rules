rules_version = '2';
service cloud.firestore {
    match /databases/{database}/documents {
        function hasTimestamp() {
            return request.resource.data.timestamp == request.time;
        }

        function isAuthenticated(id) {
            return request.auth != null && request.auth.uid == id;
        }

        function affectedKeys() {
            return request.resource.data.diff(resource.data).affectedKeys();
        }

        function isTeacher() {
            return request.auth != null && request.auth.token.isTeacher != null;
        }

        function getStudent(uid) {
            return get(/databases/$(database)/documents/students/$(uid)).data;
        }

        function getSchoolContest(student) {
            return get(/databases/$(database)/documents/schools/$(student.school)/contests/$(student.contest)).data;
        }

        function isMyStudent(student) {
            return isTeacher() && getSchoolContest(student).teacher == request.auth.uid;
        }

        match /constests/{contest} {
            allow read: if request.auth != null;
        }

        match /schools/{school}/contests/{contest} {
            function isMySchoolContest() {
                let student = getStudent(request.auth.uid);
                return student.school == school && student.contest == contest;
            }

            allow read: if isAuthenticated(resource.data.teacher) || isMySchoolContest();
            allow update: if isAuthenticated(resource.data.teacher);
        }

        match /schools/{school}/requests/{request} { // TODO
            allow read: if false;
        }

        match /solutions/{contest} {
            allow read: if false;
        }

        match /students/{student} {
            function checkStudentHash(data) {
                let joined = [data.name, data.surname, data.birthData, data.school, data.classYear, data.classSection].join('$');
                return data.variant == sha256(joined).toHexString()[0: 3];
            }

            allow read: if isAuthenticated(student) || isMyStudent(resource.data);
            allow create: if (isAuthenticated(student) && checkStudentHash(request.resource.data)) || isMyStudent(request.resource.data);
            allow update: if isMyStudent(resource.data);
        }

        match /submissions/{submission} {
            allow read: if isAuthenticated(resource.data.uid) || isMyStudent(resource.data.uid);
            allow create: if isAuthenticated(resource.data.uid) && hasTimestamp();
        }

        match /variants/{variant} {
            function isMyVariant(variant) {
                let student = getStudent(request.auth.uid);
                let contest = getSchoolContest(student);
                return student.variant == variant
                    && contest.startingTime != null
                    && contest.startingTime <= request.time;
            }

            allow read: if isMyVariant(variant) || isTeacher();
        }
    }
}
